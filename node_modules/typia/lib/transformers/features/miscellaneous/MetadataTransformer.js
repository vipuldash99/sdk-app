"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataTransformer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var LiteralFactory_1 = require("../../../factories/LiteralFactory");
var MetadataCollection_1 = require("../../../factories/MetadataCollection");
var MetadataFactory_1 = require("../../../factories/MetadataFactory");
var MetadataTransformer;
(function (MetadataTransformer) {
    function transform(_a, _modulo, expression) {
        var _b;
        var checker = _a.checker;
        if (!((_b = expression.typeArguments) === null || _b === void 0 ? void 0 : _b.length))
            throw new Error("Error on typia.metadata(): no generic argument.");
        var top = expression.typeArguments[0];
        if (!typescript_1.default.isTupleTypeNode(top))
            return expression;
        else if (top.elements.some(function (child) { return !typescript_1.default.isTypeNode(child); }))
            return expression;
        var types = top.elements.map(function (child) {
            return checker.getTypeFromTypeNode(child);
        });
        if (types.some(function (t) { return t.isTypeParameter(); }))
            throw new Error("Error on typia.metadata(): non-specified generic argument(s).");
        var collection = new MetadataCollection_1.MetadataCollection();
        var metadatas = types.map(function (type) {
            return MetadataFactory_1.MetadataFactory.generate(checker, collection, type, {
                resolve: false,
                constant: true,
            });
        });
        var app = {
            metadatas: metadatas.map(function (metadata) { return metadata.toJSON(); }),
            collection: collection.objects().map(function (obj) { return obj.toJSON(); }),
        };
        return LiteralFactory_1.LiteralFactory.generate(app);
    }
    MetadataTransformer.transform = transform;
})(MetadataTransformer = exports.MetadataTransformer || (exports.MetadataTransformer = {}));
//# sourceMappingURL=MetadataTransformer.js.map