"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallExpressionTransformer = void 0;
var path_1 = __importDefault(require("path"));
var ApplicationTransformer_1 = require("./features/miscellaneous/ApplicationTransformer");
var AssertCloneTransformer_1 = require("./features/miscellaneous/AssertCloneTransformer");
var AssertPruneTransformer_1 = require("./features/miscellaneous/AssertPruneTransformer");
var CloneTransformer_1 = require("./features/miscellaneous/CloneTransformer");
var CreateAssertCloneTransformer_1 = require("./features/miscellaneous/CreateAssertCloneTransformer");
var CreateAssertPruneTransformer_1 = require("./features/miscellaneous/CreateAssertPruneTransformer");
var CreateCloneTransformer_1 = require("./features/miscellaneous/CreateCloneTransformer");
var CreateIsCloneTransformer_1 = require("./features/miscellaneous/CreateIsCloneTransformer");
var CreateIsPruneTransformer_1 = require("./features/miscellaneous/CreateIsPruneTransformer");
var CreatePruneTransformer_1 = require("./features/miscellaneous/CreatePruneTransformer");
var CreateRandomGenerator_1 = require("./features/miscellaneous/CreateRandomGenerator");
var CreateValidateCloneTransformer_1 = require("./features/miscellaneous/CreateValidateCloneTransformer");
var CreateValidatePruneTransformer_1 = require("./features/miscellaneous/CreateValidatePruneTransformer");
var IsCloneTransformer_1 = require("./features/miscellaneous/IsCloneTransformer");
var IsPruneTransformer_1 = require("./features/miscellaneous/IsPruneTransformer");
var MetadataTransformer_1 = require("./features/miscellaneous/MetadataTransformer");
var PruneTransformer_1 = require("./features/miscellaneous/PruneTransformer");
var RandomTransformer_1 = require("./features/miscellaneous/RandomTransformer");
var ValidateCloneTransformer_1 = require("./features/miscellaneous/ValidateCloneTransformer");
var ValidatePruneTransformer_1 = require("./features/miscellaneous/ValidatePruneTransformer");
var AssertParseTransformer_1 = require("./features/parsers/AssertParseTransformer");
var CreateAssertParseTransformer_1 = require("./features/parsers/CreateAssertParseTransformer");
var CreateIsParseTransformer_1 = require("./features/parsers/CreateIsParseTransformer");
var CreateValidateParseTransformer_1 = require("./features/parsers/CreateValidateParseTransformer");
var IsParseTransformer_1 = require("./features/parsers/IsParseTransformer");
var ValidateParseTransformer_1 = require("./features/parsers/ValidateParseTransformer");
var AssertStringifyTransformer_1 = require("./features/stringifiers/AssertStringifyTransformer");
var CreateAssertStringifyTransformer_1 = require("./features/stringifiers/CreateAssertStringifyTransformer");
var CreateIsStringifyTransformer_1 = require("./features/stringifiers/CreateIsStringifyTransformer");
var CreateStringifyTransformer_1 = require("./features/stringifiers/CreateStringifyTransformer");
var CreateValidateStringifyProgrammer_1 = require("./features/stringifiers/CreateValidateStringifyProgrammer");
var IsStringifyTransformer_1 = require("./features/stringifiers/IsStringifyTransformer");
var StringifyTransformer_1 = require("./features/stringifiers/StringifyTransformer");
var ValidateStringifyTransformer_1 = require("./features/stringifiers/ValidateStringifyTransformer");
var AssertTransformer_1 = require("./features/validators/AssertTransformer");
var CreateAssertTransformer_1 = require("./features/validators/CreateAssertTransformer");
var CreateIsTransformer_1 = require("./features/validators/CreateIsTransformer");
var CreateValidateTransformer_1 = require("./features/validators/CreateValidateTransformer");
var IsTransformer_1 = require("./features/validators/IsTransformer");
var ValidateTransformer_1 = require("./features/validators/ValidateTransformer");
var CallExpressionTransformer;
(function (CallExpressionTransformer) {
    function transform(project, expression) {
        var _a;
        var declaration = (_a = project.checker.getResolvedSignature(expression)) === null || _a === void 0 ? void 0 : _a.declaration;
        if (!declaration)
            return expression;
        var file = path_1.default.resolve(declaration.getSourceFile().fileName);
        if (file.indexOf(LIB_PATH) === -1 &&
            file !== SRC_PATH &&
            file !== CLI_PATH)
            return expression;
        var name = project.checker.getTypeAtLocation(declaration).symbol.name;
        var functor = FUNCTORS[name];
        if (functor === undefined)
            return expression;
        return functor()(project, expression.expression, expression);
    }
    CallExpressionTransformer.transform = transform;
})(CallExpressionTransformer = exports.CallExpressionTransformer || (exports.CallExpressionTransformer = {}));
var LIB_PATH = path_1.default.join("node_modules", "typia", "lib", "module.d.ts");
var SRC_PATH = path_1.default.resolve(path_1.default.join(__dirname, "..", "module.ts"));
var CLI_PATH = path_1.default.resolve(path_1.default.join(__dirname, "..", "..", "..", "src", "module.ts"));
var FUNCTORS = {
    assert: function () { return AssertTransformer_1.AssertTransformer.transform(false); },
    assertType: function () { return AssertTransformer_1.AssertTransformer.transform(false); },
    is: function () { return IsTransformer_1.IsTransformer.transform(false); },
    validate: function () { return ValidateTransformer_1.ValidateTransformer.transform(false); },
    assertEquals: function () { return AssertTransformer_1.AssertTransformer.transform(true); },
    equals: function () { return IsTransformer_1.IsTransformer.transform(true); },
    validateEquals: function () { return ValidateTransformer_1.ValidateTransformer.transform(true); },
    isParse: function () { return IsParseTransformer_1.IsParseTransformer.transform; },
    assertParse: function () { return AssertParseTransformer_1.AssertParseTransformer.transform; },
    validateParse: function () { return ValidateParseTransformer_1.ValidateParseTransformer.transform; },
    application: function () { return ApplicationTransformer_1.ApplicationTransformer.transform; },
    stringify: function () { return StringifyTransformer_1.StringifyTransformer.transform; },
    assertStringify: function () { return AssertStringifyTransformer_1.AssertStringifyTransformer.transform; },
    isStringify: function () { return IsStringifyTransformer_1.IsStringifyTransformer.transform; },
    validateStringify: function () { return ValidateStringifyTransformer_1.ValidateStringifyTransformer.transform; },
    metadata: function () { return MetadataTransformer_1.MetadataTransformer.transform; },
    random: function () { return RandomTransformer_1.RandomTransformer.transform; },
    clone: function () { return CloneTransformer_1.CloneTransformer.transform; },
    assertClone: function () { return AssertCloneTransformer_1.AssertCloneTransformer.transform; },
    isClone: function () { return IsCloneTransformer_1.IsCloneTransformer.transform; },
    validateClone: function () { return ValidateCloneTransformer_1.ValidateCloneTransformer.transform; },
    prune: function () { return PruneTransformer_1.PruneTransformer.transform; },
    assertPrune: function () { return AssertPruneTransformer_1.AssertPruneTransformer.transform; },
    isPrune: function () { return IsPruneTransformer_1.IsPruneTransformer.transform; },
    validatePrune: function () { return ValidatePruneTransformer_1.ValidatePruneTransformer.transform; },
    createAssert: function () { return CreateAssertTransformer_1.CreateAssertTransformer.transform(false); },
    createAssertType: function () { return CreateAssertTransformer_1.CreateAssertTransformer.transform(false); },
    createIs: function () { return CreateIsTransformer_1.CreateIsTransformer.transform(false); },
    createValidate: function () { return CreateValidateTransformer_1.CreateValidateTransformer.transform(false); },
    createAssertEquals: function () { return CreateAssertTransformer_1.CreateAssertTransformer.transform(true); },
    createEquals: function () { return CreateIsTransformer_1.CreateIsTransformer.transform(true); },
    createValidateEquals: function () { return CreateValidateTransformer_1.CreateValidateTransformer.transform(true); },
    createIsParse: function () { return CreateIsParseTransformer_1.CreateIsParseTransformer.transform; },
    createAssertParse: function () { return CreateAssertParseTransformer_1.CreateAssertParseTransformer.transform; },
    createValidateParse: function () { return CreateValidateParseTransformer_1.CreateValidateParseTransformer.transform; },
    createStringify: function () { return CreateStringifyTransformer_1.CreateStringifyTransformer.transform; },
    createAssertStringify: function () { return CreateAssertStringifyTransformer_1.CreateAssertStringifyTransformer.transform; },
    createIsStringify: function () { return CreateIsStringifyTransformer_1.CreateIsStringifyTransformer.transform; },
    createValidateStringify: function () { return CreateValidateStringifyProgrammer_1.CreateValidateStringifyTransformer.transform; },
    createRandom: function () { return CreateRandomGenerator_1.CreateRandomTransformer.transform; },
    createClone: function () { return CreateCloneTransformer_1.CreateCloneTransformer.transform; },
    createAssertClone: function () { return CreateAssertCloneTransformer_1.CreateAssertCloneTransformer.transform; },
    createIsClone: function () { return CreateIsCloneTransformer_1.CreateIsCloneTransformer.transform; },
    createValidateClone: function () { return CreateValidateCloneTransformer_1.CreateValidateCloneTransformer.transform; },
    createPrune: function () { return CreatePruneTransformer_1.CreatePruneTransformer.transform; },
    createAssertPrune: function () { return CreateAssertPruneTransformer_1.CreateAssertPruneTransformer.transform; },
    createIsPrune: function () { return CreateIsPruneTransformer_1.CreateIsPruneTransformer.transform; },
    createValidatePrune: function () { return CreateValidatePruneTransformer_1.CreateValidatePruneTransformer.transform; },
};
//# sourceMappingURL=CallExpressionTransformer.js.map