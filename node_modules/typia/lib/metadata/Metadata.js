"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
var ArrayUtil_1 = require("../utils/ArrayUtil");
var MetadataObject_1 = require("./MetadataObject");
var MetadataProperty_1 = require("./MetadataProperty");
var Metadata = (function () {
    function Metadata(props) {
        this.name_ = undefined;
        this.parent_resolved_ = false;
        this.any = props.any;
        this.required = props.required;
        this.nullable = props.nullable;
        this.functional = props.functional;
        this.resolved = props.resolved;
        this.atomics = props.atomics;
        this.constants = props.constants;
        this.templates = props.templates;
        this.rest = props.rest;
        this.arrays = props.arrays;
        this.tuples = props.tuples;
        this.objects = props.objects;
        this.natives = props.natives;
        this.sets = props.sets;
        this.maps = props.maps;
    }
    Metadata.create = function (props) {
        return new Metadata(props);
    };
    Metadata.initialize = function (parentResolved) {
        if (parentResolved === void 0) { parentResolved = false; }
        var meta = this.create({
            any: false,
            nullable: false,
            required: true,
            functional: false,
            resolved: null,
            constants: [],
            atomics: [],
            templates: [],
            arrays: [],
            tuples: [],
            objects: [],
            rest: null,
            natives: [],
            sets: [],
            maps: [],
        });
        meta.parent_resolved_ = parentResolved;
        return meta;
    };
    Metadata.prototype.toJSON = function () {
        return {
            any: this.any,
            required: this.required,
            nullable: this.nullable,
            functional: this.functional,
            atomics: this.atomics.slice(),
            constants: JSON.parse(JSON.stringify(this.constants)),
            templates: this.templates.map(function (tpl) {
                return tpl.map(function (meta) { return meta.toJSON(); });
            }),
            resolved: this.resolved ? this.resolved.toJSON() : null,
            rest: this.rest ? this.rest.toJSON() : null,
            arrays: this.arrays.map(function (meta) { return meta.toJSON(); }),
            tuples: this.tuples.map(function (meta) {
                return meta.map(function (meta) { return meta.toJSON(); });
            }),
            objects: this.objects.map(function (obj) { return obj.name; }),
            natives: this.natives.slice(),
            sets: this.sets.map(function (meta) { return meta.toJSON(); }),
            maps: this.maps.map(function (entry) { return ({
                key: entry.key.toJSON(),
                value: entry.value.toJSON(),
            }); }),
        };
    };
    Metadata.from = function (meta, objects) {
        var e_1, _a, e_2, _b, _c;
        var dict = new Map();
        try {
            for (var objects_1 = __values(objects), objects_1_1 = objects_1.next(); !objects_1_1.done; objects_1_1 = objects_1.next()) {
                var obj = objects_1_1.value;
                dict.set(obj.name, MetadataObject_1.MetadataObject._From_without_properties(obj));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (objects_1_1 && !objects_1_1.done && (_a = objects_1.return)) _a.call(objects_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var objects_2 = __values(objects), objects_2_1 = objects_2.next(); !objects_2_1.done; objects_2_1 = objects_2.next()) {
                var obj = objects_2_1.value;
                var initialized = dict.get(obj.name);
                (_c = initialized.properties).push.apply(_c, __spreadArray([], __read(obj.properties.map(function (prop) {
                    return MetadataProperty_1.MetadataProperty._From(prop, dict);
                })), false));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (objects_2_1 && !objects_2_1.done && (_b = objects_2.return)) _b.call(objects_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this._From(meta, dict);
    };
    Metadata._From = function (meta, objects) {
        var _this = this;
        return this.create({
            any: meta.any,
            required: meta.required,
            nullable: meta.nullable,
            functional: meta.functional,
            constants: JSON.parse(JSON.stringify(meta.constants)),
            atomics: meta.atomics.slice(),
            templates: meta.templates.map(function (tpl) {
                return tpl.map(function (meta) { return _this._From(meta, objects); });
            }),
            resolved: meta.resolved ? this._From(meta.resolved, objects) : null,
            rest: meta.rest ? this._From(meta.rest, objects) : null,
            arrays: meta.arrays.map(function (meta) { return _this._From(meta, objects); }),
            tuples: meta.tuples.map(function (tuple) {
                return tuple.map(function (meta) { return _this._From(meta, objects); });
            }),
            objects: meta.objects.map(function (name) {
                var found = objects.get(name);
                if (found === undefined)
                    throw new Error("Error on Metadata.from(): failed to find object \"".concat(name, "\"."));
                return found;
            }),
            natives: meta.natives.slice(),
            sets: meta.sets.map(function (meta) { return _this._From(meta, objects); }),
            maps: meta.maps.map(function (entry) { return ({
                key: _this._From(entry.key, objects),
                value: _this._From(entry.value, objects),
            }); }),
        });
    };
    Metadata.prototype.getName = function () {
        this.name_ || (this.name_ = getName(this));
        return this.name_;
    };
    Metadata.prototype.empty = function () {
        return this.bucket() === 0 || this.size() === 0;
    };
    Metadata.prototype.size = function () {
        return ((this.resolved ? 1 : 0) +
            (this.functional ? 1 : 0) +
            this.templates.length +
            this.atomics.length +
            this.constants
                .map(function (c) { return c.values.length; })
                .reduce(function (x, y) { return x + y; }, 0) +
            (this.rest ? this.rest.size() : 0) +
            this.arrays.length +
            this.tuples.length +
            this.objects.length +
            this.natives.length +
            this.sets.length +
            this.maps.length);
    };
    Metadata.prototype.bucket = function () {
        return ((this.resolved ? 1 : 0) +
            (this.functional ? 1 : 0) +
            (this.templates.length ? 1 : 0) +
            (this.atomics.length ? 1 : 0) +
            (this.constants.length ? 1 : 0) +
            (this.rest ? this.rest.size() : 0) +
            (this.arrays.length ? 1 : 0) +
            (this.tuples.length ? 1 : 0) +
            (this.objects.length ? 1 : 0) +
            (this.natives.length ? 1 : 0) +
            (this.sets.length ? 1 : 0) +
            (this.maps.length ? 1 : 0));
    };
    Metadata.prototype.isConstant = function () {
        return this.bucket() === (this.constants.length ? 1 : 0);
    };
    Metadata.prototype.isUnionBucket = function () {
        var size = this.bucket();
        var emended = this.constants.length ? size - 1 : size;
        return emended > 1;
    };
    Metadata.prototype.getSoleLiteral = function () {
        if (this.size() === 1 &&
            this.constants.length === 1 &&
            this.constants[0].type === "string" &&
            this.constants[0].values.length === 1)
            return this.constants[0].values[0];
        else
            return null;
    };
    Metadata.prototype.isSoleLiteral = function () {
        return this.getSoleLiteral() !== null;
    };
    Metadata.prototype.isParentResolved = function () {
        return this.parent_resolved_;
    };
    return Metadata;
}());
exports.Metadata = Metadata;
(function (Metadata) {
    function intersects(x, y, deep) {
        var e_3, _a, e_4, _b, e_5, _c, e_6, _d, e_7, _e, e_8, _f, e_9, _g, e_10, _h;
        if (x.any || y.any)
            return true;
        if (x.required === false && false === y.required)
            return true;
        if (x.nullable === true && true === y.nullable)
            return true;
        if (deep === true) {
            try {
                for (var _j = __values(x.arrays), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var xa = _k.value;
                    try {
                        for (var _l = (e_4 = void 0, __values(y.arrays)), _m = _l.next(); !_m.done; _m = _l.next()) {
                            var ya = _m.value;
                            if (intersects(xa, ya, deep)) {
                                return true;
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_m && !_m.done && (_b = _l.return)) _b.call(_l);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_a = _j.return)) _a.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
            try {
                for (var _o = __values(x.objects), _p = _o.next(); !_p.done; _p = _o.next()) {
                    var xo = _p.value;
                    try {
                        for (var _q = (e_6 = void 0, __values(y.objects)), _r = _q.next(); !_r.done; _r = _q.next()) {
                            var yo = _r.value;
                            if (MetadataObject_1.MetadataObject.intersects(xo, yo)) {
                                return true;
                            }
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_r && !_r.done && (_d = _q.return)) _d.call(_q);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_p && !_p.done && (_c = _o.return)) _c.call(_o);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            if (x.arrays.length && y.arrays.length)
                return true;
            if (x.objects.length && y.objects.length)
                return true;
        }
        try {
            for (var _s = __values(x.tuples), _t = _s.next(); !_t.done; _t = _s.next()) {
                var xt = _t.value;
                var _loop_1 = function (yt) {
                    if (xt.length === 0 || yt.length === 0)
                        return { value: xt.length === 0 && yt.length === 0 };
                    else if (xt
                        .slice(0, Math.min(xt.length, yt.length))
                        .some(function (xv, i) { return intersects(xv, yt[i], deep); }))
                        return { value: true };
                };
                try {
                    for (var _u = (e_8 = void 0, __values(y.tuples)), _v = _u.next(); !_v.done; _v = _u.next()) {
                        var yt = _v.value;
                        var state_1 = _loop_1(yt);
                        if (typeof state_1 === "object")
                            return state_1.value;
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (_v && !_v.done && (_f = _u.return)) _f.call(_u);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_t && !_t.done && (_e = _s.return)) _e.call(_s);
            }
            finally { if (e_7) throw e_7.error; }
        }
        try {
            for (var _w = __values(x.atomics), _x = _w.next(); !_x.done; _x = _w.next()) {
                var atomic = _x.value;
                if (y.atomics.includes(atomic))
                    return true;
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_x && !_x.done && (_g = _w.return)) _g.call(_w);
            }
            finally { if (e_9) throw e_9.error; }
        }
        var _loop_2 = function (constant) {
            var opposite = y.constants.find(function (elem) { return elem.type === constant.type; });
            if (opposite === undefined)
                return "continue";
            var values = new Set(__spreadArray(__spreadArray([], __read(constant.values), false), __read(opposite.values), false));
            if (values.size !== constant.values.length + opposite.values.length)
                return { value: true };
        };
        try {
            for (var _y = __values(x.constants), _z = _y.next(); !_z.done; _z = _y.next()) {
                var constant = _z.value;
                var state_2 = _loop_2(constant);
                if (typeof state_2 === "object")
                    return state_2.value;
            }
        }
        catch (e_10_1) { e_10 = { error: e_10_1 }; }
        finally {
            try {
                if (_z && !_z.done && (_h = _y.return)) _h.call(_y);
            }
            finally { if (e_10) throw e_10.error; }
        }
        if (x.functional === true && y.functional === true)
            return true;
        return false;
    }
    Metadata.intersects = intersects;
    function covers(x, y) {
        var e_11, _a, e_12, _b, e_13, _c, e_14, _d, e_15, _e;
        if (x.any)
            return true;
        else if (y.any)
            return false;
        var _loop_3 = function (ya) {
            if (x.arrays.some(function (xa) { return covers(xa, ya) === true; }) === false)
                return { value: false };
        };
        try {
            for (var _f = __values(y.arrays), _g = _f.next(); !_g.done; _g = _f.next()) {
                var ya = _g.value;
                var state_3 = _loop_3(ya);
                if (typeof state_3 === "object")
                    return state_3.value;
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_11) throw e_11.error; }
        }
        var _loop_4 = function (yo) {
            if (x.objects.some(function (xo) { return MetadataObject_1.MetadataObject.covers(xo, yo); }) === false)
                return { value: false };
        };
        try {
            for (var _h = __values(y.objects), _j = _h.next(); !_j.done; _j = _h.next()) {
                var yo = _j.value;
                var state_4 = _loop_4(yo);
                if (typeof state_4 === "object")
                    return state_4.value;
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
            }
            finally { if (e_12) throw e_12.error; }
        }
        var _loop_5 = function (yt) {
            if (yt.length !== 0 &&
                x.tuples.some(function (xt) {
                    return xt.length >= yt.length &&
                        xt
                            .slice(yt.length)
                            .every(function (xv, i) { return covers(xv, yt[i]); });
                }) === false)
                return { value: false };
        };
        try {
            for (var _k = __values(y.tuples), _l = _k.next(); !_l.done; _l = _k.next()) {
                var yt = _l.value;
                var state_5 = _loop_5(yt);
                if (typeof state_5 === "object")
                    return state_5.value;
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
            }
            finally { if (e_13) throw e_13.error; }
        }
        var _loop_6 = function (ys) {
            if (x.sets.some(function (xs) { return covers(xs, ys); }) === false)
                return { value: false };
        };
        try {
            for (var _m = __values(y.sets), _o = _m.next(); !_o.done; _o = _m.next()) {
                var ys = _o.value;
                var state_6 = _loop_6(ys);
                if (typeof state_6 === "object")
                    return state_6.value;
            }
        }
        catch (e_14_1) { e_14 = { error: e_14_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
            }
            finally { if (e_14) throw e_14.error; }
        }
        if (y.atomics.some(function (atomic) { return x.atomics.includes(atomic) === false; }))
            return false;
        var _loop_7 = function (yc) {
            var xc = x.constants.find(function (elem) { return elem.type === yc.type; });
            if (xc === undefined)
                return { value: false };
            else if (yc.values.some(function (yv) { return xc.values.includes(yv) === false; }))
                return { value: false };
        };
        try {
            for (var _p = __values(y.constants), _q = _p.next(); !_q.done; _q = _p.next()) {
                var yc = _q.value;
                var state_7 = _loop_7(yc);
                if (typeof state_7 === "object")
                    return state_7.value;
            }
        }
        catch (e_15_1) { e_15 = { error: e_15_1 }; }
        finally {
            try {
                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
            }
            finally { if (e_15) throw e_15.error; }
        }
        if (x.functional === false && y.functional)
            return false;
        return true;
    }
    Metadata.covers = covers;
    function merge(x, y) {
        var e_16, _a, e_17, _b, e_18, _c;
        var _d;
        var output = Metadata.create({
            any: x.any || y.any,
            nullable: x.nullable || y.nullable,
            required: x.required && y.required,
            functional: x.functional || y.functional,
            resolved: x.resolved !== null && y.resolved !== null
                ? merge(x.resolved, y.resolved)
                : x.resolved || y.resolved,
            atomics: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(x.atomics), false), __read(y.atomics), false))), false),
            constants: __spreadArray([], __read(x.constants), false),
            templates: x.templates.slice(),
            rest: x.rest !== null && y.rest !== null
                ? merge(x.rest, y.rest)
                : (_d = x.rest) !== null && _d !== void 0 ? _d : y.rest,
            arrays: x.arrays.slice(),
            tuples: x.tuples.slice(),
            objects: x.objects.slice(),
            natives: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(x.natives), false), __read(y.natives), false))), false),
            sets: x.sets.slice(),
            maps: x.maps.slice(),
        });
        var _loop_8 = function (constant) {
            var e_19, _l;
            var target = ArrayUtil_1.ArrayUtil.take(output.constants, function (elem) { return elem.type === constant.type; }, function () { return ({
                type: constant.type,
                values: [],
            }); });
            try {
                for (var _m = (e_19 = void 0, __values(constant.values)), _o = _m.next(); !_o.done; _o = _m.next()) {
                    var value = _o.value;
                    ArrayUtil_1.ArrayUtil.add(target.values, value);
                }
            }
            catch (e_19_1) { e_19 = { error: e_19_1 }; }
            finally {
                try {
                    if (_o && !_o.done && (_l = _m.return)) _l.call(_m);
                }
                finally { if (e_19) throw e_19.error; }
            }
        };
        try {
            for (var _e = __values(y.constants), _f = _e.next(); !_f.done; _f = _e.next()) {
                var constant = _f.value;
                _loop_8(constant);
            }
        }
        catch (e_16_1) { e_16 = { error: e_16_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_16) throw e_16.error; }
        }
        try {
            for (var _g = __values(y.arrays), _h = _g.next(); !_h.done; _h = _g.next()) {
                var array = _h.value;
                ArrayUtil_1.ArrayUtil.set(output.arrays, array, function (elem) { return elem.getName(); });
            }
        }
        catch (e_17_1) { e_17 = { error: e_17_1 }; }
        finally {
            try {
                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
            }
            finally { if (e_17) throw e_17.error; }
        }
        try {
            for (var _j = __values(y.objects), _k = _j.next(); !_k.done; _k = _j.next()) {
                var obj = _k.value;
                ArrayUtil_1.ArrayUtil.set(output.objects, obj, function (elem) { return elem.name; });
            }
        }
        catch (e_18_1) { e_18 = { error: e_18_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
            }
            finally { if (e_18) throw e_18.error; }
        }
        if (x.rest !== null)
            ArrayUtil_1.ArrayUtil.set(output.arrays, x.rest, function (elem) { return elem.getName(); });
        if (y.rest !== null)
            ArrayUtil_1.ArrayUtil.set(output.arrays, y.rest, function (elem) { return elem.getName(); });
        return output;
    }
    Metadata.merge = merge;
})(Metadata = exports.Metadata || (exports.Metadata = {}));
exports.Metadata = Metadata;
function getName(metadata) {
    var e_20, _a, e_21, _b, e_22, _c, e_23, _d, e_24, _e, e_25, _f, e_26, _g, e_27, _h, e_28, _j, e_29, _k;
    if (metadata.any === true)
        return "any";
    var elements = [];
    if (metadata.nullable === true)
        elements.push("null");
    if (metadata.required === false)
        elements.push("undefined");
    try {
        for (var _l = __values(metadata.atomics), _m = _l.next(); !_m.done; _m = _l.next()) {
            var type = _m.value;
            elements.push(type);
        }
    }
    catch (e_20_1) { e_20 = { error: e_20_1 }; }
    finally {
        try {
            if (_m && !_m.done && (_a = _l.return)) _a.call(_l);
        }
        finally { if (e_20) throw e_20.error; }
    }
    try {
        for (var _o = __values(metadata.constants), _p = _o.next(); !_p.done; _p = _o.next()) {
            var constant = _p.value;
            try {
                for (var _q = (e_22 = void 0, __values(constant.values)), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var value = _r.value;
                    elements.push(JSON.stringify(value));
                }
            }
            catch (e_22_1) { e_22 = { error: e_22_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_c = _q.return)) _c.call(_q);
                }
                finally { if (e_22) throw e_22.error; }
            }
        }
    }
    catch (e_21_1) { e_21 = { error: e_21_1 }; }
    finally {
        try {
            if (_p && !_p.done && (_b = _o.return)) _b.call(_o);
        }
        finally { if (e_21) throw e_21.error; }
    }
    try {
        for (var _s = __values(metadata.templates), _t = _s.next(); !_t.done; _t = _s.next()) {
            var template = _t.value;
            elements.push("`" +
                template
                    .map(function (child) {
                    return child.isConstant() && child.size() === 1
                        ? child.constants[0].values[0]
                        : "${".concat(child.getName(), "}");
                })
                    .join("")
                    .split("`")
                    .join("\\`") +
                "`");
        }
    }
    catch (e_23_1) { e_23 = { error: e_23_1 }; }
    finally {
        try {
            if (_t && !_t.done && (_d = _s.return)) _d.call(_s);
        }
        finally { if (e_23) throw e_23.error; }
    }
    try {
        for (var _u = __values(metadata.natives), _v = _u.next(); !_v.done; _v = _u.next()) {
            var native = _v.value;
            elements.push(native);
        }
    }
    catch (e_24_1) { e_24 = { error: e_24_1 }; }
    finally {
        try {
            if (_v && !_v.done && (_e = _u.return)) _e.call(_u);
        }
        finally { if (e_24) throw e_24.error; }
    }
    try {
        for (var _w = __values(metadata.sets), _x = _w.next(); !_x.done; _x = _w.next()) {
            var set = _x.value;
            elements.push("Set<".concat(set.getName(), ">"));
        }
    }
    catch (e_25_1) { e_25 = { error: e_25_1 }; }
    finally {
        try {
            if (_x && !_x.done && (_f = _w.return)) _f.call(_w);
        }
        finally { if (e_25) throw e_25.error; }
    }
    try {
        for (var _y = __values(metadata.maps), _z = _y.next(); !_z.done; _z = _y.next()) {
            var map = _z.value;
            elements.push("Map<".concat(map.key.getName(), ", ").concat(map.value.getName(), ">"));
        }
    }
    catch (e_26_1) { e_26 = { error: e_26_1 }; }
    finally {
        try {
            if (_z && !_z.done && (_g = _y.return)) _g.call(_y);
        }
        finally { if (e_26) throw e_26.error; }
    }
    if (metadata.rest !== null)
        elements.push("...".concat(metadata.rest.getName()));
    try {
        for (var _0 = __values(metadata.tuples), _1 = _0.next(); !_1.done; _1 = _0.next()) {
            var tuple = _1.value;
            elements.push("[".concat(tuple.map(function (elem) { return elem.getName(); }).join(", "), "]"));
        }
    }
    catch (e_27_1) { e_27 = { error: e_27_1 }; }
    finally {
        try {
            if (_1 && !_1.done && (_h = _0.return)) _h.call(_0);
        }
        finally { if (e_27) throw e_27.error; }
    }
    try {
        for (var _2 = __values(metadata.arrays), _3 = _2.next(); !_3.done; _3 = _2.next()) {
            var array = _3.value;
            elements.push("Array<".concat(array.getName(), ">"));
        }
    }
    catch (e_28_1) { e_28 = { error: e_28_1 }; }
    finally {
        try {
            if (_3 && !_3.done && (_j = _2.return)) _j.call(_2);
        }
        finally { if (e_28) throw e_28.error; }
    }
    try {
        for (var _4 = __values(metadata.objects), _5 = _4.next(); !_5.done; _5 = _4.next()) {
            var object = _5.value;
            elements.push("Resolve<".concat(object.name, ">"));
        }
    }
    catch (e_29_1) { e_29 = { error: e_29_1 }; }
    finally {
        try {
            if (_5 && !_5.done && (_k = _4.return)) _k.call(_4);
        }
        finally { if (e_29) throw e_29.error; }
    }
    if (metadata.resolved !== null)
        elements.push(metadata.resolved.getName());
    if (elements.length === 0)
        return "unknown";
    else if (elements.length === 1)
        return elements[0];
    elements.sort();
    return "(".concat(elements.join(" | "), ")");
}
//# sourceMappingURL=Metadata.js.map