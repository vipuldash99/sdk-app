"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespace = void 0;
var RandomGenerator_1 = require("../utils/RandomGenerator");
var TypeGuardError_1 = require("../TypeGuardError");
var _any_1 = require("./$any");
var _every_1 = require("./$every");
var _guard_1 = require("./$guard");
var _is_between_1 = require("./$is_between");
var _is_date_1 = require("./$is_date");
var _is_datetime_1 = require("./$is_datetime");
var _is_email_1 = require("./$is_email");
var _is_ipv4_1 = require("./$is_ipv4");
var _is_ipv6_1 = require("./$is_ipv6");
var _is_url_1 = require("./$is_url");
var _is_uuid_1 = require("./$is_uuid");
var _join_1 = require("./$join");
var _number_1 = require("./$number");
var _report_1 = require("./$report");
var _rest_1 = require("./$rest");
var _string_1 = require("./$string");
var _tail_1 = require("./$tail");
var Namespace;
(function (Namespace) {
    Namespace.is = function () { return ({
        is_uuid: _is_uuid_1.$is_uuid,
        is_email: _is_email_1.$is_email,
        is_url: _is_url_1.$is_url,
        is_ipv4: _is_ipv4_1.$is_ipv4,
        is_ipv6: _is_ipv6_1.$is_ipv6,
        is_between: _is_between_1.$is_between,
        is_date: _is_date_1.$is_date,
        is_datetime: _is_datetime_1.$is_datetime,
    }); };
    Namespace.assert = function (method) { return (__assign(__assign({}, Namespace.is()), { join: _join_1.$join, every: _every_1.$every, guard: (0, _guard_1.$guard)("typia.".concat(method)), predicate: function (matched, exceptionable, closure) {
            if (matched === false && exceptionable === true)
                throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, closure()), { method: "typia.".concat(method) }));
            return matched;
        } })); };
    Namespace.validate = function () { return (__assign(__assign({}, Namespace.is()), { join: _join_1.$join, report: _report_1.$report, predicate: function (res) {
            return function (matched, exceptionable, closure) {
                if (matched === false && exceptionable === true)
                    (function () {
                        res.success && (res.success = false);
                        var errorList = res.errors;
                        var error = closure();
                        if (errorList.length) {
                            var last = errorList[errorList.length - 1].path;
                            if (last.length >= error.path.length &&
                                last.substring(0, error.path.length) ===
                                    error.path)
                                return;
                        }
                        errorList.push(error);
                        return;
                    })();
                return matched;
            };
        } })); };
    Namespace.stringify = function (method) { return (__assign(__assign({}, Namespace.is()), { number: _number_1.$number, string: _string_1.$string, tail: _tail_1.$tail, rest: _rest_1.$rest, throws: $throws(method) })); };
    Namespace.clone = function (method) { return (__assign(__assign({}, Namespace.is()), { throws: $throws(method), any: _any_1.$any })); };
    Namespace.prune = function (method) { return (__assign(__assign({}, Namespace.is()), { throws: $throws(method) })); };
    Namespace.random = function () { return ({
        generator: RandomGenerator_1.RandomGenerator,
        pick: RandomGenerator_1.RandomGenerator.pick,
    }); };
    var $throws = function (method) {
        return function (props) {
            throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, props), { method: "typia.".concat(method) }));
        };
    };
})(Namespace = exports.Namespace || (exports.Namespace = {}));
//# sourceMappingURL=Namespace.js.map