"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginConfigurator = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var FileRetriever_1 = require("./FileRetriever");
var PluginConfigurator;
(function (PluginConfigurator) {
    function configure(pack, args) {
        return __awaiter(this, void 0, void 0, function () {
            var installed, error;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        installed = pack.install({
                            dev: true,
                            modulo: "comment-json",
                            version: "4.2.3",
                            silent: true,
                        });
                        return [4, (function () { return __awaiter(_this, void 0, void 0, function () {
                                var exp_1;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            _a.trys.push([0, 2, , 3]);
                                            return [4, _Configure(pack, args)];
                                        case 1:
                                            _a.sent();
                                            return [2, null];
                                        case 2:
                                            exp_1 = _a.sent();
                                            return [2, exp_1];
                                        case 3: return [2];
                                    }
                                });
                            }); })()];
                    case 1:
                        error = _a.sent();
                        if (installed)
                            pack.erase({
                                modulo: "comment-json",
                                silent: true,
                            });
                        if (error !== null)
                            throw error;
                        return [2];
                }
            });
        });
    }
    PluginConfigurator.configure = configure;
    function _Configure(pack, args) {
        return __awaiter(this, void 0, void 0, function () {
            var Comment, config, _a, _b, compilerOptions, plugins, strict, oldbie;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, FileRetriever_1.FileRetriever.require(path_1.default.join("node_modules", "comment-json"))(pack.directory)];
                    case 1:
                        Comment = _c.sent();
                        _b = (_a = Comment).parse;
                        return [4, fs_1.default.promises.readFile(args.project, "utf8")];
                    case 2:
                        config = _b.apply(_a, [_c.sent()]);
                        compilerOptions = config.compilerOptions;
                        if (compilerOptions === undefined)
                            throw new Error("".concat(args.project, " file does not have \"compilerOptions\" property."));
                        plugins = (function () {
                            var plugins = compilerOptions.plugins;
                            if (plugins === undefined)
                                return (compilerOptions.plugins = []);
                            else if (!Array.isArray(plugins))
                                throw new Error("\"plugins\" property of ".concat(args.project, " must be array type."));
                            return plugins;
                        })();
                        strict = compilerOptions.strict === true;
                        oldbie = plugins.find(function (p) {
                            return typeof p === "object" &&
                                p !== null &&
                                p.transform === "typia/lib/transform";
                        });
                        if (strict === true && oldbie !== undefined)
                            return [2];
                        compilerOptions.strict = true;
                        if (oldbie === undefined)
                            plugins.push(Comment.parse("\n                        {\n                            \"transform\": \"typia/lib/transform\"\n                        }"));
                        return [4, fs_1.default.promises.writeFile(args.project, Comment.stringify(config, null, 2))];
                    case 3:
                        _c.sent();
                        return [2];
                }
            });
        });
    }
})(PluginConfigurator = exports.PluginConfigurator || (exports.PluginConfigurator = {}));
//# sourceMappingURL=PluginConfigurator.js.map