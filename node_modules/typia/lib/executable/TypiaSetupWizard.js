"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypiaSetupWizard = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var ArgumentParser_1 = require("./setup/ArgumentParser");
var CommandExecutor_1 = require("./setup/CommandExecutor");
var PackageManager_1 = require("./setup/PackageManager");
var PluginConfigurator_1 = require("./setup/PluginConfigurator");
var TypiaSetupWizard;
(function (TypiaSetupWizard) {
    var _this = this;
    function setup() {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var pack, args;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.log("----------------------------------------");
                        console.log(" Typia Setup Wizard");
                        console.log("----------------------------------------");
                        return [4, PackageManager_1.PackageManager.mount()];
                    case 1:
                        pack = _b.sent();
                        return [4, ArgumentParser_1.ArgumentParser.parse(pack)(true)(inquiry)];
                    case 2:
                        args = _b.sent();
                        pack.install({ dev: true, modulo: "typescript", version: "4.9.5" });
                        (_a = args.project) !== null && _a !== void 0 ? _a : (args.project = (function () {
                            CommandExecutor_1.CommandExecutor.run("npx tsc --init", false);
                            return (args.project = "tsconfig.json");
                        })());
                        pack.install({ dev: true, modulo: "ts-node" });
                        pack.install({ dev: true, modulo: args.compiler });
                        if (!(args.compiler === "ts-patch")) return [3, 4];
                        return [4, pack.save(function (data) {
                                var _a;
                                (_a = data.scripts) !== null && _a !== void 0 ? _a : (data.scripts = {});
                                if (typeof data.scripts.prepare === "string" &&
                                    data.scripts.prepare.indexOf("ts-patch install") === -1)
                                    data.scripts.prepare =
                                        "ts-patch install && " + data.scripts.prepare;
                                else
                                    data.scripts.prepare = "ts-patch install";
                            })];
                    case 3:
                        _b.sent();
                        CommandExecutor_1.CommandExecutor.run("npm run prepare", false);
                        _b.label = 4;
                    case 4:
                        pack.install({ dev: false, modulo: "typia" });
                        return [4, PluginConfigurator_1.PluginConfigurator.configure(pack, args)];
                    case 5:
                        _b.sent();
                        return [2];
                }
            });
        });
    }
    TypiaSetupWizard.setup = setup;
    var inquiry = function (pack, command, prompt, action) { return __awaiter(_this, void 0, void 0, function () {
        var questioned, select, configure;
        var _this = this;
        return __generator(this, function (_a) {
            command.option("--compiler [compiler]", "compiler type");
            command.option("--manager [manager", "package manager");
            command.option("--project [project]", "tsconfig.json file location");
            questioned = { value: false };
            select = function (name) {
                return function (message) {
                    return function (choices) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    questioned.value = true;
                                    return [4, prompt()({
                                            type: "list",
                                            name: name,
                                            message: message,
                                            choices: choices,
                                        })];
                                case 1: return [2, (_a.sent())[name]];
                            }
                        });
                    }); };
                };
            };
            configure = function () { return __awaiter(_this, void 0, void 0, function () {
                var fileList;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, fs_1.default.promises.readdir(process.cwd())];
                        case 1: return [4, (_a.sent())
                                .filter(function (str) {
                                return str.substring(0, 8) === "tsconfig" &&
                                    str.substring(str.length - 5) === ".json";
                            })
                                .sort(function (x, y) {
                                return x === "tsconfig.json"
                                    ? -1
                                    : y === "tsconfig.json"
                                        ? 1
                                        : x < y
                                            ? -1
                                            : 1;
                            })];
                        case 2:
                            fileList = _a.sent();
                            if (fileList.length === 0) {
                                if (process.cwd() !== pack.directory)
                                    throw new Error("Unable to find \"tsconfig.json\" file.");
                                return [2, null];
                            }
                            else if (fileList.length === 1)
                                return [2, fileList[0]];
                            return [2, select("tsconfig")("TS Config File")(fileList)];
                    }
                });
            }); };
            return [2, action(function (options) { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, _c, _d, _e;
                    var _f, _g;
                    return __generator(this, function (_h) {
                        switch (_h.label) {
                            case 0:
                                if (!(options.compiler === undefined)) return [3, 2];
                                console.log(COMPILER_DESCRIPTION);
                                _a = options;
                                return [4, select("compiler")("Compiler")(is_nest_cli(pack)
                                        ? ["ts-patch", "ttypescript"]
                                        : ["ttypescript", "ts-patch"])];
                            case 1:
                                _a.compiler = _h.sent();
                                _h.label = 2;
                            case 2:
                                if (!((_f = options.manager) !== null && _f !== void 0)) return [3, 3];
                                _b = _f;
                                return [3, 5];
                            case 3:
                                _c = options;
                                return [4, select("manager")("Package Manager")([
                                        "npm",
                                        "pnpm",
                                        "yarn",
                                    ])];
                            case 4:
                                _b = (_c.manager = _h.sent());
                                _h.label = 5;
                            case 5:
                                _b;
                                pack.manager = options.manager;
                                if (!((_g = options.project) !== null && _g !== void 0)) return [3, 6];
                                _d = _g;
                                return [3, 8];
                            case 6:
                                _e = options;
                                return [4, configure()];
                            case 7:
                                _d = (_e.project = _h.sent());
                                _h.label = 8;
                            case 8:
                                _d;
                                if (questioned.value)
                                    console.log("");
                                return [2, options];
                        }
                    });
                }); })];
        });
    }); };
    function is_nest_cli(pack) {
        var _a;
        return ((typeof ((_a = pack.data.scripts) === null || _a === void 0 ? void 0 : _a.build) === "string" &&
            pack.data.scripts.build.indexOf("nest build") !== -1) ||
            fs_1.default.existsSync(path_1.default.join(pack.directory, "nest-cli.json")));
    }
})(TypiaSetupWizard = exports.TypiaSetupWizard || (exports.TypiaSetupWizard = {}));
var COMPILER_DESCRIPTION = [
    "About compiler, if you adapt \"ttypescript\", you should use \"ttsc\" instead.",
    "",
    "Otherwise, you choose \"ts-patch\", you can use the original \"tsc\" command.",
    "However, the \"ts-patch\" hacks \"node_modules/typescript\" source code.",
    "Also, whenever update \"typescript\", you've to run \"npm run prepare\" command.",
    "",
    "By the way, when using \"@nest/cli\", you must just choose \"ts-patch\".",
    "",
].join("\n");
//# sourceMappingURL=TypiaSetupWizard.js.map