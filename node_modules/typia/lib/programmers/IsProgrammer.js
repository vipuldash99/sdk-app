"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ExpressionFactory_1 = require("../factories/ExpressionFactory");
var IdentifierFactory_1 = require("../factories/IdentifierFactory");
var ValueFactory_1 = require("../factories/ValueFactory");
var CheckerProgrammer_1 = require("./CheckerProgrammer");
var FunctionImporeter_1 = require("./helpers/FunctionImporeter");
var OptionPredicator_1 = require("./helpers/OptionPredicator");
var check_object_1 = require("./internal/check_object");
var feature_object_entries_1 = require("./internal/feature_object_entries");
var IsProgrammer;
(function (IsProgrammer) {
    IsProgrammer.CONFIG = function (options) {
        return function (importer) { return ({
            functors: "$io",
            unioners: "$iu",
            trace: false,
            path: false,
            equals: !!(options === null || options === void 0 ? void 0 : options.object),
            numeric: OptionPredicator_1.OptionPredicator.numeric({
                numeric: options === null || options === void 0 ? void 0 : options.numeric,
            }),
            combiner: function () { return function (type) {
                var initial = type === "and"
                    ? typescript_1.default.factory.createTrue()
                    : typescript_1.default.factory.createFalse();
                var binder = type === "and"
                    ? typescript_1.default.factory.createLogicalAnd
                    : typescript_1.default.factory.createLogicalOr;
                return function (_input, binaries) {
                    return binaries.length
                        ? binaries
                            .map(function (binary) { return binary.expression; })
                            .reduce(function (x, y) { return binder(x, y); })
                        : initial;
                };
            }; },
            joiner: {
                object: (options === null || options === void 0 ? void 0 : options.object) ||
                    (0, check_object_1.check_object)({
                        equals: !!(options === null || options === void 0 ? void 0 : options.object),
                        undefined: OptionPredicator_1.OptionPredicator.undefined({
                            undefined: options === null || options === void 0 ? void 0 : options.undefined,
                        }),
                        assert: true,
                        reduce: typescript_1.default.factory.createLogicalAnd,
                        positive: typescript_1.default.factory.createTrue(),
                        superfluous: function () { return typescript_1.default.factory.createFalse(); },
                    })(importer),
                array: function (input, arrow) {
                    return typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.join(input, "every"), undefined, [arrow]);
                },
                failure: function () { return typescript_1.default.factory.createFalse(); },
            },
            success: typescript_1.default.factory.createTrue(),
        }); };
    };
    function generate(project, modulo, equals) {
        if (equals === void 0) { equals = false; }
        var importer = new FunctionImporeter_1.FunctionImporter();
        var config = IsProgrammer.CONFIG({
            object: (0, check_object_1.check_object)({
                equals: equals,
                undefined: OptionPredicator_1.OptionPredicator.undefined(project.options),
                assert: true,
                reduce: typescript_1.default.factory.createLogicalAnd,
                positive: typescript_1.default.factory.createTrue(),
                superfluous: function () { return typescript_1.default.factory.createFalse(); },
            })(importer),
            numeric: OptionPredicator_1.OptionPredicator.numeric(project.options),
        })(importer);
        config.trace = equals;
        config.decoder = function (input, target, explore, tags) {
            if (target.size() === 1 &&
                target.objects.length === 1 &&
                target.required === true &&
                target.nullable === false) {
                var obj = target.objects[0];
                if (obj._Is_simple() &&
                    (equals === false ||
                        OptionPredicator_1.OptionPredicator.undefined(project.options) === false))
                    return typescript_1.default.factory.createLogicalAnd(ExpressionFactory_1.ExpressionFactory.isObject(input, {
                        checkNull: true,
                        checkArray: false,
                    }), config.joiner.object(input, (0, feature_object_entries_1.feature_object_entries)(config)(importer)(obj)(input)));
            }
            return CheckerProgrammer_1.CheckerProgrammer.decode(project, config, importer)(input, target, explore, tags);
        };
        return CheckerProgrammer_1.CheckerProgrammer.generate(project, config, importer, function () {
            return importer.declare(modulo);
        });
    }
    IsProgrammer.generate = generate;
    IsProgrammer.generate_functors = function (project, importer) {
        return CheckerProgrammer_1.CheckerProgrammer.generate_functors(project, IsProgrammer.CONFIG()(importer), importer);
    };
    IsProgrammer.generate_unioners = function (project, importer) {
        return CheckerProgrammer_1.CheckerProgrammer.generate_unioners(project, IsProgrammer.CONFIG()(importer), importer);
    };
    IsProgrammer.decode = function (project, importer) {
        return CheckerProgrammer_1.CheckerProgrammer.decode(project, IsProgrammer.CONFIG()(importer), importer);
    };
    IsProgrammer.decode_object = function (importer) {
        return CheckerProgrammer_1.CheckerProgrammer.decode_object(IsProgrammer.CONFIG()(importer))(importer);
    };
    function decode_to_json(input, checkNull) {
        return typescript_1.default.factory.createLogicalAnd(ExpressionFactory_1.ExpressionFactory.isObject(input, {
            checkArray: false,
            checkNull: checkNull,
        }), typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("function"), ValueFactory_1.ValueFactory.TYPEOF(IdentifierFactory_1.IdentifierFactory.join(input, "toJSON"))));
    }
    IsProgrammer.decode_to_json = decode_to_json;
    function decode_functional(input) {
        return typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("function"), ValueFactory_1.ValueFactory.TYPEOF(input));
    }
    IsProgrammer.decode_functional = decode_functional;
})(IsProgrammer = exports.IsProgrammer || (exports.IsProgrammer = {}));
//# sourceMappingURL=IsProgrammer.js.map