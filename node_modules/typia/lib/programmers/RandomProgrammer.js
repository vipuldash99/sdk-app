"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ExpressionFactory_1 = require("../factories/ExpressionFactory");
var IdentifierFactory_1 = require("../factories/IdentifierFactory");
var MetadataCollection_1 = require("../factories/MetadataCollection");
var MetadataFactory_1 = require("../factories/MetadataFactory");
var StatementFactory_1 = require("../factories/StatementFactory");
var TemplateFactory_1 = require("../factories/TemplateFactory");
var TypeFactory_1 = require("../factories/TypeFactory");
var FunctionImporeter_1 = require("./helpers/FunctionImporeter");
var RandomJoiner_1 = require("./helpers/RandomJoiner");
var RandomRanger_1 = require("./helpers/RandomRanger");
var RandomProgrammer;
(function (RandomProgrammer) {
    function generate(project, modulo) {
        var importer = new FunctionImporeter_1.FunctionImporter();
        return function (type, name) {
            var collection = new MetadataCollection_1.MetadataCollection();
            var meta = MetadataFactory_1.MetadataFactory.generate(project.checker, collection, type, {
                resolve: true,
                constant: true,
            });
            var functors = generate_functors(importer)(collection);
            var output = decode(importer)({
                object: false,
                recursive: false,
            })(meta, []);
            return typescript_1.default.factory.createArrowFunction(undefined, undefined, [
                IdentifierFactory_1.IdentifierFactory.parameter("generator", typescript_1.default.factory.createTypeReferenceNode("Partial<typia.IRandomGenerator>"), IdentifierFactory_1.IdentifierFactory.join(typescript_1.default.factory.createParenthesizedExpression(typescript_1.default.factory.createAsExpression(modulo, TypeFactory_1.TypeFactory.keyword("any"))), "generator")),
            ], typescript_1.default.factory.createTypeReferenceNode("typia.Primitive<".concat(name !== null && name !== void 0 ? name : TypeFactory_1.TypeFactory.getFullName(project.checker, type), ">")), undefined, typescript_1.default.factory.createBlock(__spreadArray(__spreadArray(__spreadArray([], __read(importer.declare(modulo)), false), __read(functors), false), [
                typescript_1.default.factory.createReturnStatement(output),
            ], false), true));
        };
    }
    RandomProgrammer.generate = generate;
    var generate_functors = function (importer) { return function (collection) {
        return collection.objects().map(function (obj, i) {
            return StatementFactory_1.StatementFactory.constant(FUNCTOR(i), typescript_1.default.factory.createArrowFunction(undefined, undefined, [
                IdentifierFactory_1.IdentifierFactory.parameter("_recursive", TypeFactory_1.TypeFactory.keyword("boolean"), typescript_1.default.factory.createIdentifier(String(obj.recursive))),
                IdentifierFactory_1.IdentifierFactory.parameter("_depth", TypeFactory_1.TypeFactory.keyword("number"), typescript_1.default.factory.createNumericLiteral(0)),
            ], TypeFactory_1.TypeFactory.keyword("any"), undefined, RandomJoiner_1.RandomJoiner.object(COALESCE(importer))(decode(importer)({
                recursive: obj.recursive,
                object: true,
            }))(obj)));
        });
    }; };
    var decode = function (importer) {
        return function (explore) {
            return function (meta, tags) {
                var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, e_8, _h;
                var expressions = [];
                if (meta.any)
                    expressions.push(typescript_1.default.factory.createStringLiteral("fucking any type exists..."));
                if (meta.required === false)
                    expressions.push(typescript_1.default.factory.createIdentifier("undefined"));
                if (meta.nullable === true)
                    expressions.push(typescript_1.default.factory.createNull());
                try {
                    for (var _j = __values(meta.constants), _k = _j.next(); !_k.done; _k = _j.next()) {
                        var constant = _k.value;
                        try {
                            for (var _l = (e_2 = void 0, __values(constant.values)), _m = _l.next(); !_m.done; _m = _l.next()) {
                                var value = _m.value;
                                expressions.push(decode_atomic(value));
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_m && !_m.done && (_b = _l.return)) _b.call(_l);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_k && !_k.done && (_a = _j.return)) _a.call(_j);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                try {
                    for (var _o = __values(meta.templates), _p = _o.next(); !_p.done; _p = _o.next()) {
                        var template = _p.value;
                        expressions.push(decode_template(importer)(explore)(template));
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_p && !_p.done && (_c = _o.return)) _c.call(_o);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                try {
                    for (var _q = __values(meta.atomics), _r = _q.next(); !_r.done; _r = _q.next()) {
                        var atomic = _r.value;
                        if (atomic === "boolean")
                            expressions.push(decode_boolean(importer));
                        else if (atomic === "number")
                            expressions.push(decode_number(importer)(tags));
                        else if (atomic === "string")
                            expressions.push(decode_string(importer)(tags));
                        else if (atomic === "bigint")
                            expressions.push(decode_bigint(importer)(tags));
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_r && !_r.done && (_d = _q.return)) _d.call(_q);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                if (meta.resolved)
                    expressions.push(decode(importer)(explore)(meta.resolved, tags));
                try {
                    for (var _s = __values(meta.tuples), _t = _s.next(); !_t.done; _t = _s.next()) {
                        var t = _t.value;
                        expressions.push(RandomJoiner_1.RandomJoiner.tuple(decode(importer)(explore))(t, tags));
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_t && !_t.done && (_e = _s.return)) _e.call(_s);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                try {
                    for (var _u = __values(meta.arrays), _v = _u.next(); !_v.done; _v = _u.next()) {
                        var a = _v.value;
                        var array = RandomJoiner_1.RandomJoiner.array(COALESCE(importer))(decode(importer)(explore))(a, tags);
                        expressions.push(explore.recursive && a.objects.length
                            ? typescript_1.default.factory.createConditionalExpression(typescript_1.default.factory.createLogicalAnd(typescript_1.default.factory.createIdentifier("_recursive"), typescript_1.default.factory.createLessThan(typescript_1.default.factory.createNumericLiteral(5), typescript_1.default.factory.createIdentifier("_depth"))), undefined, typescript_1.default.factory.createIdentifier("[]"), undefined, array)
                            : array);
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_v && !_v.done && (_f = _u.return)) _f.call(_u);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                try {
                    for (var _w = __values(meta.objects), _x = _w.next(); !_x.done; _x = _w.next()) {
                        var o = _x.value;
                        expressions.push(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier(FUNCTOR(o.index)), undefined, explore.object
                            ? [
                                explore.recursive
                                    ? typescript_1.default.factory.createTrue()
                                    : typescript_1.default.factory.createIdentifier("_recursive"),
                                typescript_1.default.factory.createConditionalExpression(typescript_1.default.factory.createIdentifier("_recursive"), undefined, typescript_1.default.factory.createAdd(typescript_1.default.factory.createNumericLiteral(1), typescript_1.default.factory.createIdentifier("_depth")), undefined, typescript_1.default.factory.createIdentifier("_depth")),
                            ]
                            : undefined));
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_x && !_x.done && (_g = _w.return)) _g.call(_w);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
                try {
                    for (var _y = __values(meta.natives), _z = _y.next(); !_z.done; _z = _y.next()) {
                        var native = _z.value;
                        if (native === "Boolean")
                            expressions.push(decode_boolean(importer));
                        else if (native === "Number")
                            expressions.push(decode_number(importer)(tags));
                        else if (native === "String")
                            expressions.push(decode_string(importer)(tags));
                        else
                            expressions.push(typescript_1.default.factory.createIdentifier("{}"));
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (_z && !_z.done && (_h = _y.return)) _h.call(_y);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
                if (meta.sets.length || meta.maps.length)
                    expressions.push(typescript_1.default.factory.createIdentifier("{}"));
                if (expressions.length === 1)
                    return expressions[0];
                return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createCallExpression(importer.use("pick"), undefined, [
                    typescript_1.default.factory.createArrayLiteralExpression(expressions.map(function (expr) {
                        return typescript_1.default.factory.createArrowFunction(undefined, undefined, [], undefined, undefined, expr);
                    }), true),
                ]), undefined, undefined);
            };
        };
    };
    var decode_boolean = function (importer) {
        return typescript_1.default.factory.createCallExpression(COALESCE(importer)("boolean"), undefined, undefined);
    };
    var decode_atomic = function (value) {
        return typeof value === "boolean"
            ? typescript_1.default.factory.createIdentifier(value.toString())
            : typeof value === "number"
                ? typescript_1.default.factory.createNumericLiteral(value)
                : typeof value === "string"
                    ? typescript_1.default.factory.createStringLiteral(value)
                    : typescript_1.default.factory.createBigIntLiteral(value.toString());
    };
    var decode_template = function (importer) {
        return function (explore) {
            return function (template) {
                return TemplateFactory_1.TemplateFactory.generate(template.map(function (meta) { return decode(importer)(explore)(meta, []); }));
            };
        };
    };
    var decode_number = function (importer) {
        return function (tags) {
            var type = tags.find(function (t) { return t.kind === "type" && t.value === "uint"; })
                ? "int"
                : tags.find(function (t) { return t.kind === "type" && t.value === "int"; })
                    ? "uint"
                    : "double";
            return RandomRanger_1.RandomRanger.number({
                type: type,
                transform: function (value) { return typescript_1.default.factory.createNumericLiteral(value); },
                setter: function (args) {
                    return typescript_1.default.factory.createCallExpression(type === "double" &&
                        tags.every(function (t) {
                            return t.kind !== "multipleOf" &&
                                t.kind !== "step";
                        })
                        ? COALESCE(importer)("number")
                        : COALESCE(importer)("integer"), undefined, args.map(function (val) { return typescript_1.default.factory.createNumericLiteral(val); }));
                },
            })({
                minimum: 0,
                maximum: 100,
                gap: 10,
            })(tags);
        };
    };
    var decode_bigint = function (importer) {
        return function (tags) {
            return RandomRanger_1.RandomRanger.number({
                type: tags.find(function (t) { return t.kind === "type" && t.value === "uint"; })
                    ? "uint"
                    : "int",
                transform: function (value) {
                    return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("BigInt"), undefined, [typescript_1.default.factory.createStringLiteral(value.toString())]);
                },
                setter: function (args) {
                    return typescript_1.default.factory.createCallExpression(COALESCE(importer)("bigint"), undefined, args.map(function (value) {
                        return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("BigInt"), undefined, [
                            typescript_1.default.factory.createStringLiteral(value.toString()),
                        ]);
                    }));
                },
            })({
                minimum: 0,
                maximum: 100,
                gap: 10,
            })(tags);
        };
    };
    var decode_string = function (importer) {
        return function (tags) {
            var e_9, _a;
            try {
                for (var tags_1 = __values(tags), tags_1_1 = tags_1.next(); !tags_1_1.done; tags_1_1 = tags_1.next()) {
                    var t = tags_1_1.value;
                    if (t.kind === "format")
                        return typescript_1.default.factory.createCallExpression(COALESCE(importer)(t.value), undefined, undefined);
                    else if (t.kind === "pattern")
                        return typescript_1.default.factory.createCallExpression(COALESCE(importer)("pattern"), undefined, [typescript_1.default.factory.createIdentifier("/".concat(t.value, "/"))]);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (tags_1_1 && !tags_1_1.done && (_a = tags_1.return)) _a.call(tags_1);
                }
                finally { if (e_9) throw e_9.error; }
            }
            var tail = RandomRanger_1.RandomRanger.length(COALESCE(importer))({
                minimum: 5,
                maximum: 25,
                gap: 5,
            })({
                fixed: "length",
                minimum: "minLength",
                maximum: "maxLength",
            })(tags);
            return typescript_1.default.factory.createCallExpression(COALESCE(importer)("string"), undefined, tail ? [tail] : undefined);
        };
    };
})(RandomProgrammer = exports.RandomProgrammer || (exports.RandomProgrammer = {}));
var FUNCTOR = function (i) { return "$ro".concat(i); };
var COALESCE = function (importer) { return function (name) {
    return ExpressionFactory_1.ExpressionFactory.coalesce(typescript_1.default.factory.createIdentifier("generator.".concat(name)), IdentifierFactory_1.IdentifierFactory.join(importer.use("generator"), name));
}; };
//# sourceMappingURL=RandomProgrammer.js.map