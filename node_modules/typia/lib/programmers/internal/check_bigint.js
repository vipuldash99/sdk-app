"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_bigint = void 0;
var typescript_1 = __importDefault(require("typescript"));
function check_bigint(input, tagList) {
    var e_1, _a;
    var caster = function (value) {
        return typescript_1.default.factory.createIdentifier("".concat(Math.floor(value), "n"));
    };
    var conditions = [
        typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("bigint"), typescript_1.default.factory.createTypeOfExpression(input)),
    ];
    var _loop_1 = function (tag) {
        if (tag.kind === "multipleOf")
            conditions.push(typescript_1.default.factory.createStrictEquality(caster(0), typescript_1.default.factory.createModulo(input, caster(tag.value))));
        else if (tag.kind === "step") {
            var modulo = function () {
                return typescript_1.default.factory.createModulo(input, caster(tag.value));
            };
            var minimum = (function () {
                var e_2, _a;
                try {
                    for (var tagList_2 = (e_2 = void 0, __values(tagList)), tagList_2_1 = tagList_2.next(); !tagList_2_1.done; tagList_2_1 = tagList_2.next()) {
                        var tag_1 = tagList_2_1.value;
                        if (tag_1.kind === "minimum")
                            return tag_1.value;
                        else if (tag_1.kind === "exclusiveMinimum")
                            return tag_1.value;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (tagList_2_1 && !tagList_2_1.done && (_a = tagList_2.return)) _a.call(tagList_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return undefined;
            })();
            conditions.push(typescript_1.default.factory.createStrictEquality(caster(0), minimum !== undefined
                ? typescript_1.default.factory.createSubtract(modulo(), caster(minimum))
                : modulo()));
        }
        else if (tag.kind === "minimum")
            conditions.push(typescript_1.default.factory.createLessThanEquals(caster(tag.value), input));
        else if (tag.kind === "maximum")
            conditions.push(typescript_1.default.factory.createGreaterThanEquals(caster(tag.value), input));
        else if (tag.kind === "exclusiveMinimum")
            conditions.push(typescript_1.default.factory.createLessThan(caster(tag.value), input));
        else if (tag.kind === "exclusiveMaximum")
            conditions.push(typescript_1.default.factory.createGreaterThan(caster(tag.value), input));
    };
    try {
        for (var tagList_1 = __values(tagList), tagList_1_1 = tagList_1.next(); !tagList_1_1.done; tagList_1_1 = tagList_1.next()) {
            var tag = tagList_1_1.value;
            _loop_1(tag);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (tagList_1_1 && !tagList_1_1.done && (_a = tagList_1.return)) _a.call(tagList_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return conditions.length === 1
        ? conditions[0]
        : conditions.reduce(function (x, y) { return typescript_1.default.factory.createLogicalAnd(x, y); });
}
exports.check_bigint = check_bigint;
//# sourceMappingURL=check_bigint.js.map