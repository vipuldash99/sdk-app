"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_union_array_like = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("../../factories/IdentifierFactory");
var StatementFactory_1 = require("../../factories/StatementFactory");
var TypeFactory_1 = require("../../factories/TypeFactory");
var check_union_array_like = function (accessor) {
    return function (props) {
        return function (input, targets, explore, tags) {
            if (targets.length === 1)
                return props.decoder(accessor.array(input), targets[0], explore, tags);
            var tupleListVariable = StatementFactory_1.StatementFactory.constant("tupleList", typescript_1.default.factory.createArrayLiteralExpression(targets.map(function (meta) {
                return typescript_1.default.factory.createArrayLiteralExpression([
                    typescript_1.default.factory.createArrowFunction(undefined, undefined, [
                        IdentifierFactory_1.IdentifierFactory.parameter("top", TypeFactory_1.TypeFactory.keyword("any")),
                    ], undefined, undefined, props.checker(typescript_1.default.factory.createIdentifier("top"), meta, __assign(__assign({}, explore), { tracable: false, postfix: "\"[0]\"" }), tags, input)),
                    typescript_1.default.factory.createArrowFunction(undefined, undefined, [
                        IdentifierFactory_1.IdentifierFactory.parameter("top", TypeFactory_1.TypeFactory.keyword("any")),
                    ], undefined, undefined, props.decoder(typescript_1.default.factory.createIdentifier("top"), meta, __assign(__assign({}, explore), { tracable: true }), tags)),
                ]);
            })));
            var filteredVariable = StatementFactory_1.StatementFactory.constant("filtered", typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tupleList.filter"), undefined, [
                typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("tuple")], undefined, undefined, typescript_1.default.factory.createStrictEquality(props.success, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tuple[0]"), undefined, [typescript_1.default.factory.createIdentifier("front")]))),
            ]));
            var uniqueStatement = typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(1), typescript_1.default.factory.createIdentifier("filtered.length")), typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("filtered[0][1]"), undefined, [accessor.array(input)])));
            var forOfStatement = typescript_1.default.factory.createForOfStatement(undefined, typescript_1.default.factory.createVariableDeclarationList([typescript_1.default.factory.createVariableDeclaration("tuple")], typescript_1.default.NodeFlags.Const), typescript_1.default.factory.createIdentifier("filtered"), typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.join(typescript_1.default.factory.createIdentifier("array"), "every"), undefined, [
                typescript_1.default.factory.createArrowFunction(undefined, undefined, [
                    IdentifierFactory_1.IdentifierFactory.parameter("value", TypeFactory_1.TypeFactory.keyword("any")),
                ], undefined, undefined, typescript_1.default.factory.createStrictEquality(props.success, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tuple[0]"), undefined, [typescript_1.default.factory.createIdentifier("value")]))),
            ]), typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tuple[1]"), undefined, [typescript_1.default.factory.createIdentifier("array")]))));
            var unionStatement = typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createLessThan(typescript_1.default.factory.createNumericLiteral(1), typescript_1.default.factory.createIdentifier("filtered.length")), forOfStatement);
            var block = __spreadArray(__spreadArray([], __read((accessor.size !== null
                ? [
                    typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(0), accessor.size(input)), typescript_1.default.isReturnStatement(props.empty)
                        ? props.empty
                        : typescript_1.default.factory.createReturnStatement(props.empty)),
                ]
                : [])), false), [
                tupleListVariable,
                StatementFactory_1.StatementFactory.constant("front", accessor.front(input)),
                filteredVariable,
                uniqueStatement,
                StatementFactory_1.StatementFactory.constant("array", accessor.array(input)),
                unionStatement,
                props.failure(input, "(".concat(targets.map(function (t) { return accessor.name(t); }).join(" | "), ")"), explore),
            ], false);
            return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createArrowFunction(undefined, undefined, [], undefined, undefined, typescript_1.default.factory.createBlock(block, true)), undefined, undefined);
        };
    };
};
exports.check_union_array_like = check_union_array_like;
//# sourceMappingURL=check_union_array_like.js.map