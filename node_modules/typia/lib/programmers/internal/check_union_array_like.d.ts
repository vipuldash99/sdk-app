import ts from "typescript";
import { IMetadataTag } from "../../metadata/IMetadataTag";
import { CheckerProgrammer } from "../CheckerProgrammer";
import { FeatureProgrammer } from "../FeatureProgrammer";
import { UnionExplorer } from "../helpers/UnionExplorer";
export declare const check_union_array_like: <T>(accessor: check_union_array_like.IAccessor<T>) => (props: check_union_array_like.IProps<T>) => (input: ts.Expression, targets: T[], explore: FeatureProgrammer.IExplore, tags: IMetadataTag[]) => ts.Expression;
export declare namespace check_union_array_like {
    interface IProps<T> {
        checker(front: ts.Expression, target: T, explore: FeatureProgrammer.IExplore, tags: IMetadataTag[], array: ts.Expression): ts.Expression;
        decoder: UnionExplorer.Decoder<T>;
        empty: ts.ReturnStatement | ts.Expression;
        success: ts.Expression;
        failure(input: ts.Expression, expected: string, explore: CheckerProgrammer.IExplore): ts.Statement;
    }
    interface IAccessor<T> {
        name(target: T): string;
        front(input: ts.Expression): ts.Expression;
        array(input: ts.Expression): ts.Expression;
        size: null | ((input: ts.Expression) => ts.Expression);
    }
}
