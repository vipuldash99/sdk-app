"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createValidatePrune = exports.createIsPrune = exports.createAssertPrune = exports.createPrune = exports.createValidateClone = exports.createIsClone = exports.createAssertClone = exports.createClone = exports.createRandom = exports.createValidateStringify = exports.createIsStringify = exports.createAssertStringify = exports.createStringify = exports.createValidateParse = exports.createAssertParse = exports.createIsParse = exports.createValidateEquals = exports.createEquals = exports.createAssertEquals = exports.createValidate = exports.createIs = exports.createAssertType = exports.createAssert = exports.validatePrune = exports.isPrune = exports.assertPrune = exports.prune = exports.validateClone = exports.isClone = exports.assertClone = exports.clone = exports.random = exports.metadata = exports.validateStringify = exports.isStringify = exports.assertStringify = exports.stringify = exports.validateParse = exports.isParse = exports.assertParse = exports.application = exports.validateEquals = exports.equals = exports.assertEquals = exports.validate = exports.is = exports.assertType = exports.assert = void 0;
var Namespace_1 = require("./functional/Namespace");
__exportStar(require("./schemas/IJsonApplication"), exports);
__exportStar(require("./schemas/IJsonComponents"), exports);
__exportStar(require("./schemas/IJsonSchema"), exports);
__exportStar(require("./IRandomGenerator"), exports);
__exportStar(require("./IValidation"), exports);
__exportStar(require("./Primitive"), exports);
__exportStar(require("./TypeGuardError"), exports);
function assert() {
    halt("assert");
}
exports.assert = assert;
Object.assign(assert, Namespace_1.Namespace.assert("assert"));
function assertType() {
    halt("assertType");
}
exports.assertType = assertType;
Object.assign(assertType, Namespace_1.Namespace.assert("assertType"));
function is() {
    halt("is");
}
exports.is = is;
Object.assign(is, Namespace_1.Namespace.assert("is"));
function validate() {
    halt("validate");
}
exports.validate = validate;
Object.assign(validate, Namespace_1.Namespace.validate());
function assertEquals() {
    halt("assertEquals");
}
exports.assertEquals = assertEquals;
Object.assign(assertEquals, Namespace_1.Namespace.assert("assertEquals"));
function equals() {
    halt("equals");
}
exports.equals = equals;
Object.assign(equals, Namespace_1.Namespace.is());
function validateEquals() {
    halt("validateEquals");
}
exports.validateEquals = validateEquals;
Object.assign(validateEquals, Namespace_1.Namespace.validate());
function application() {
    halt("application");
}
exports.application = application;
function assertParse() {
    halt("assertParse");
}
exports.assertParse = assertParse;
Object.assign(assertParse, Namespace_1.Namespace.assert("assertParse"));
function isParse() {
    halt("isParse");
}
exports.isParse = isParse;
Object.assign(isParse, is);
function validateParse() {
    halt("validateParse");
}
exports.validateParse = validateParse;
Object.assign(validateParse, validate);
function stringify() {
    halt("stringify");
}
exports.stringify = stringify;
Object.assign(stringify, Namespace_1.Namespace.stringify("stringify"));
function assertStringify() {
    halt("assertStringify");
}
exports.assertStringify = assertStringify;
Object.assign(assertStringify, Namespace_1.Namespace.assert("assertStringify"));
Object.assign(assertStringify, Namespace_1.Namespace.stringify("assertStringify"));
function isStringify() {
    halt("isStringify");
}
exports.isStringify = isStringify;
Object.assign(isStringify, Namespace_1.Namespace.is());
Object.assign(isStringify, Namespace_1.Namespace.stringify("isStringify"));
function validateStringify() {
    halt("validateStringify");
}
exports.validateStringify = validateStringify;
Object.assign(validateStringify, Namespace_1.Namespace.validate());
Object.assign(validateStringify, Namespace_1.Namespace.stringify("validateStringify"));
function metadata() {
    halt("metadata");
}
exports.metadata = metadata;
function random() {
    halt("random");
}
exports.random = random;
Object.assign(random, Namespace_1.Namespace.random());
function clone() {
    halt("clone");
}
exports.clone = clone;
Object.assign(clone, Namespace_1.Namespace.clone("clone"));
function assertClone() {
    halt("assertClone");
}
exports.assertClone = assertClone;
Object.assign(assertClone, Namespace_1.Namespace.assert("assertClone"));
Object.assign(assertClone, Namespace_1.Namespace.clone("assertClone"));
function isClone() {
    halt("isClone");
}
exports.isClone = isClone;
Object.assign(isClone, Namespace_1.Namespace.is());
Object.assign(isClone, Namespace_1.Namespace.clone("isClone"));
function validateClone() {
    halt("validateClone");
}
exports.validateClone = validateClone;
Object.assign(validateClone, Namespace_1.Namespace.validate());
Object.assign(validateClone, Namespace_1.Namespace.clone("validateClone"));
function prune() {
    halt("prune");
}
exports.prune = prune;
Object.assign(prune, Namespace_1.Namespace.prune("prune"));
function assertPrune() {
    halt("assertPrune");
}
exports.assertPrune = assertPrune;
Object.assign(assertPrune, Namespace_1.Namespace.assert("assertPrune"));
Object.assign(assertPrune, Namespace_1.Namespace.prune("assertPrune"));
function isPrune() {
    halt("isPrune");
}
exports.isPrune = isPrune;
Object.assign(isPrune, Namespace_1.Namespace.is());
Object.assign(isPrune, Namespace_1.Namespace.prune("isPrune"));
function validatePrune() {
    halt("validatePrune");
}
exports.validatePrune = validatePrune;
Object.assign(validatePrune, Namespace_1.Namespace.prune("validatePrune"));
Object.assign(validatePrune, Namespace_1.Namespace.validate());
function createAssert() {
    halt("createAssert");
}
exports.createAssert = createAssert;
Object.assign(createAssert, assert);
function createAssertType() {
    halt("createAssertType");
}
exports.createAssertType = createAssertType;
Object.assign(createAssertType, assertType);
function createIs() {
    halt("createIs");
}
exports.createIs = createIs;
Object.assign(createIs, is);
function createValidate() {
    halt("createValidate");
}
exports.createValidate = createValidate;
Object.assign(createValidate, validate);
function createAssertEquals() {
    halt("createAssertEquals");
}
exports.createAssertEquals = createAssertEquals;
Object.assign(createAssertEquals, assertEquals);
function createEquals() {
    halt("createEquals");
}
exports.createEquals = createEquals;
Object.assign(createEquals, equals);
function createValidateEquals() {
    halt("createValidateEquals");
}
exports.createValidateEquals = createValidateEquals;
Object.assign(createValidateEquals, validateEquals);
function createIsParse() {
    halt("createIsParse");
}
exports.createIsParse = createIsParse;
Object.assign(createIsParse, isParse);
function createAssertParse() {
    halt("createAssertParse");
}
exports.createAssertParse = createAssertParse;
Object.assign(createAssertParse, assertParse);
function createValidateParse() {
    halt("createValidateParse");
}
exports.createValidateParse = createValidateParse;
Object.assign(createValidateParse, validateParse);
function createStringify() {
    halt("createStringify");
}
exports.createStringify = createStringify;
Object.assign(createStringify, stringify);
function createAssertStringify() {
    halt("createAssertStringify");
}
exports.createAssertStringify = createAssertStringify;
Object.assign(createAssertStringify, assertStringify);
function createIsStringify() {
    halt("createIsStringify");
}
exports.createIsStringify = createIsStringify;
Object.assign(createIsStringify, isStringify);
function createValidateStringify() {
    halt("createValidateStringify");
}
exports.createValidateStringify = createValidateStringify;
Object.assign(createValidateStringify, validateStringify);
function createRandom() {
    halt("createRandom");
}
exports.createRandom = createRandom;
Object.assign(createRandom, random);
function createClone() {
    halt("createClone");
}
exports.createClone = createClone;
Object.assign(createClone, clone);
function createAssertClone() {
    halt("createAssertClone");
}
exports.createAssertClone = createAssertClone;
Object.assign(createAssertClone, assertClone);
function createIsClone() {
    halt("createIsClone");
}
exports.createIsClone = createIsClone;
Object.assign(createIsClone, isClone);
function createValidateClone() {
    halt("createValidateClone");
}
exports.createValidateClone = createValidateClone;
Object.assign(createValidateClone, validateClone);
function createPrune() {
    halt("createPrune");
}
exports.createPrune = createPrune;
Object.assign(createPrune, prune);
function createAssertPrune() {
    halt("createAssertPrune");
}
exports.createAssertPrune = createAssertPrune;
Object.assign(createAssertPrune, assertPrune);
function createIsPrune() {
    halt("createIsPrune");
}
exports.createIsPrune = createIsPrune;
Object.assign(createIsPrune, isPrune);
function createValidatePrune() {
    halt("createValidatePrune");
}
exports.createValidatePrune = createValidatePrune;
Object.assign(createValidatePrune, validatePrune);
function halt(name) {
    throw new Error("Error on typia.".concat(name, "(): no transform has been configured. Configure the \"tsconfig.json\" file following the [README.md#setup](https://github.com/samchon/typia#setup)"));
}
//# sourceMappingURL=module.js.map