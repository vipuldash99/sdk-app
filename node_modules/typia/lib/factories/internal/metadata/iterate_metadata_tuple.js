"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterate_metadata_tuple = void 0;
var typescript_1 = __importDefault(require("typescript"));
var Metadata_1 = require("../../../metadata/Metadata");
var Writable_1 = require("../../../typings/Writable");
var ArrayUtil_1 = require("../../../utils/ArrayUtil");
var explore_metadata_1 = require("./explore_metadata");
var iterate_metadata_tuple = function (checker) {
    return function (options) {
        return function (collection) {
            return function (meta, type) {
                var _a, _b, _c;
                if (!checker.isTupleType(type))
                    return false;
                var elementFlags = (_c = (_a = type.elementFlags) !== null && _a !== void 0 ? _a : (_b = type.target) === null || _b === void 0 ? void 0 : _b.elementFlags) !== null && _c !== void 0 ? _c : [];
                var children = checker
                    .getTypeArguments(type)
                    .map(function (elem, i) {
                    var child = (0, explore_metadata_1.explore_metadata)(checker)(options)(collection)(elem, false);
                    var flag = elementFlags[i];
                    if (flag !== typescript_1.default.ElementFlags.Rest)
                        return child;
                    var wrapper = Metadata_1.Metadata.initialize();
                    (0, Writable_1.Writable)(wrapper).rest = child;
                    return wrapper;
                });
                ArrayUtil_1.ArrayUtil.set(meta.tuples, children, join_tuple_names);
                return true;
            };
        };
    };
};
exports.iterate_metadata_tuple = iterate_metadata_tuple;
function join_tuple_names(metas) {
    return "[".concat(metas.map(function (m) { return m.getName; }).join(", "), "]");
}
//# sourceMappingURL=iterate_metadata_tuple.js.map