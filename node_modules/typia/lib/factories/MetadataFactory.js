"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataFactory = void 0;
var explore_metadata_1 = require("./internal/metadata/explore_metadata");
var MetadataFactory;
(function (MetadataFactory) {
    function generate(checker, collection, type, options) {
        var e_1, _a;
        var metadata = (0, explore_metadata_1.explore_metadata)(checker)(options)(collection)(type, false);
        var _loop_1 = function (object) {
            object.recursive = object.properties.some(function (prop) {
                return isRecursive(object.name, prop.value);
            });
        };
        try {
            for (var _b = __values(collection.objects()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var object = _c.value;
                _loop_1(object);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return metadata;
    }
    MetadataFactory.generate = generate;
    function isRecursive(name, meta) {
        var similar = function (str) {
            return name === str ||
                name.indexOf("<".concat(str, ",")) !== -1 ||
                name.indexOf(", ".concat(str, ">")) !== -1 ||
                name.indexOf(", ".concat(str, ",")) !== -1;
        };
        return (meta.objects.some(function (obj) { return similar(obj.name); }) ||
            meta.arrays.some(function (arr) { return isRecursive(name, arr); }) ||
            meta.tuples.some(function (tuple) {
                return tuple.some(function (m) { var _a; return isRecursive(name, (_a = m.rest) !== null && _a !== void 0 ? _a : m); });
            }) ||
            meta.maps.some(function (map) { return isRecursive(name, map.value); }));
    }
})(MetadataFactory = exports.MetadataFactory || (exports.MetadataFactory = {}));
//# sourceMappingURL=MetadataFactory.js.map