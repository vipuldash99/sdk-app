"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypiaFileFactory = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var typescript_1 = __importDefault(require("typescript"));
var ImportTransformer_1 = require("../transformers/ImportTransformer");
var transform_1 = __importDefault(require("../transform"));
var TypiaFileFactory;
(function (TypiaFileFactory) {
    var _this = this;
    function generate(props) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var parent_1, config, program, _c, _d, result, printer, _e, _f, file, to, content, e_1_1;
            var e_1, _g;
            var _this = this;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        props.input = path_1.default.resolve(props.input);
                        props.output = path_1.default.resolve(props.output);
                        return [4, is_directory(props.input)];
                    case 1:
                        if (!((_h.sent()) === false)) return [3, 2];
                        throw new Error("Error on TypiaGenerator.generate(): input path is not a directory.");
                    case 2:
                        if (!(fs_1.default.existsSync(props.output) === false)) return [3, 4];
                        return [4, fs_1.default.promises.mkdir(props.output, { recursive: true })];
                    case 3:
                        _h.sent();
                        return [3, 8];
                    case 4: return [4, is_directory(props.output)];
                    case 5:
                        if (!((_h.sent()) === false)) return [3, 8];
                        parent_1 = path_1.default.join(props.output, "..");
                        return [4, is_directory(parent_1)];
                    case 6:
                        if ((_h.sent()) === false)
                            throw new Error("Error on TypiaGenerator.generate(): output path is not a directory.");
                        return [4, fs_1.default.promises.mkdir(props.output)];
                    case 7:
                        _h.sent();
                        _h.label = 8;
                    case 8:
                        config = typescript_1.default.readConfigFile(props.project, typescript_1.default.sys.readFile).config;
                        _d = (_c = typescript_1.default).createProgram;
                        return [4, (function () { return __awaiter(_this, void 0, void 0, function () {
                                var container;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            container = [];
                                            return [4, gather(container)(props.input)(props.output)];
                                        case 1:
                                            _a.sent();
                                            return [2, container];
                                    }
                                });
                            }); })()];
                    case 9:
                        program = _d.apply(_c, [_h.sent(), config.compilerOptions]);
                        result = typescript_1.default.transform(program
                            .getSourceFiles()
                            .filter(function (file) {
                            return !file.isDeclarationFile &&
                                path_1.default.resolve(file.fileName).indexOf(props.input) !== -1;
                        }), [
                            ImportTransformer_1.ImportTransformer.transform(props.input)(props.output),
                            (0, transform_1.default)(program, (_b = ((_a = config.compilerOptions.plugins) !== null && _a !== void 0 ? _a : []).find(function (p) {
                                return p.transform === "typia/lib/transform" ||
                                    p.transform === "../src/transform.ts";
                            })) !== null && _b !== void 0 ? _b : {}),
                        ], program.getCompilerOptions());
                        printer = typescript_1.default.createPrinter({
                            newLine: typescript_1.default.NewLineKind.LineFeed,
                        });
                        _h.label = 10;
                    case 10:
                        _h.trys.push([10, 15, 16, 17]);
                        _e = __values(result.transformed), _f = _e.next();
                        _h.label = 11;
                    case 11:
                        if (!!_f.done) return [3, 14];
                        file = _f.value;
                        to = path_1.default
                            .resolve(file.fileName)
                            .replace(props.input, props.output);
                        content = printer.printFile(file);
                        return [4, fs_1.default.promises.writeFile(to, emend(content), "utf8")];
                    case 12:
                        _h.sent();
                        _h.label = 13;
                    case 13:
                        _f = _e.next();
                        return [3, 11];
                    case 14: return [3, 17];
                    case 15:
                        e_1_1 = _h.sent();
                        e_1 = { error: e_1_1 };
                        return [3, 17];
                    case 16:
                        try {
                            if (_f && !_f.done && (_g = _e.return)) _g.call(_e);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7];
                    case 17: return [2];
                }
            });
        });
    }
    TypiaFileFactory.generate = generate;
    var emend = function (content) {
        if (content.indexOf("typia.") === -1 ||
            content.indexOf("import typia") !== -1 ||
            content.indexOf("import * as typia") !== -1)
            return content;
        return "import typia from \"typia\";\n\n".concat(content);
    };
    var is_directory = function (current) { return __awaiter(_this, void 0, void 0, function () {
        var stat;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, fs_1.default.promises.stat(current)];
                case 1:
                    stat = _a.sent();
                    return [2, stat.isDirectory()];
            }
        });
    }); };
    var gather = function (container) { return function (from) { return function (to) { return __awaiter(_this, void 0, void 0, function () {
        var directory, directory_1, directory_1_1, file, next, stat, e_2_1;
        var e_2, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(fs_1.default.existsSync(to) === false)) return [3, 2];
                    return [4, fs_1.default.promises.mkdir(to)];
                case 1:
                    _b.sent();
                    _b.label = 2;
                case 2: return [4, fs_1.default.promises.readdir(from)];
                case 3:
                    directory = _b.sent();
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 11, 12, 13]);
                    directory_1 = __values(directory), directory_1_1 = directory_1.next();
                    _b.label = 5;
                case 5:
                    if (!!directory_1_1.done) return [3, 10];
                    file = directory_1_1.value;
                    next = path_1.default.join(from, file);
                    return [4, fs_1.default.promises.stat(next)];
                case 6:
                    stat = _b.sent();
                    if (!stat.isDirectory()) return [3, 8];
                    return [4, gather(container)(next)(path_1.default.join(to, file))];
                case 7:
                    _b.sent();
                    return [3, 9];
                case 8:
                    if (file.substring(file.length - 3) === ".ts")
                        container.push(next);
                    _b.label = 9;
                case 9:
                    directory_1_1 = directory_1.next();
                    return [3, 5];
                case 10: return [3, 13];
                case 11:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 13];
                case 12:
                    try {
                        if (directory_1_1 && !directory_1_1.done && (_a = directory_1.return)) _a.call(directory_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7];
                case 13: return [2, container];
            }
        });
    }); }; }; };
})(TypiaFileFactory = exports.TypiaFileFactory || (exports.TypiaFileFactory = {}));
//# sourceMappingURL=TypiaFileFactory.js.map